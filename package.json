{
  "name": "opa",
  "icon": "logo.png",
  "displayName": "Open Policy Agent",
  "repository": {
    "type": "git",
    "url": "https://github.com/open-policy-agent/vscode-opa.git"
  },
  "description": "Develop, test, debug, and analyze policies for the Open Policy Agent project.",
  "version": "0.18.0",
  "publisher": "tsandall",
  "engines": {
    "vscode": "^1.96.0"
  },
  "activationEvents": [
    "onLanguage:rego",
    "onDebugResolve:opa-debug",
    "onDebugDynamicConfigurations:opa-debug"
  ],
  "categories": [
    "Programming Languages",
    "Linters",
    "Testing",
    "Debuggers"
  ],
  "keywords": [
    "open policy agent",
    "opa",
    "rego",
    "policy",
    "regal"
  ],
  "main": "./out/extension",
  "contributes": {
    "menus": {
      "editor/title/run": [
        {
          "command": "opa.debug.debugWorkspace",
          "when": "resourceLangId == rego",
          "group": "navigation@1"
        }
      ],
      "commandPalette": [
        {
          "command": "opa.debug.debugWorkspace",
          "when": "resourceLangId == rego"
        }
      ]
    },
    "commands": [
      {
        "command": "opa.check.file",
        "title": "OPA: Check File Syntax"
      },
      {
        "command": "opa.eval.package",
        "title": "OPA: Evaluate Package"
      },
      {
        "command": "opa.eval.selection",
        "title": "OPA: Evaluate Selection"
      },
      {
        "command": "opa.eval.coverage",
        "title": "OPA: Toggle Evaluation Coverage"
      },
      {
        "command": "opa.test.workspace",
        "title": "OPA: Test Workspace"
      },
      {
        "command": "opa.test.coverage.workspace",
        "title": "OPA: Toggle Workspace Coverage"
      },
      {
        "command": "opa.trace.selection",
        "title": "OPA: Trace Selection"
      },
      {
        "command": "opa.profile.selection",
        "title": "OPA: Profile Selection"
      },
      {
        "command": "opa.partial.selection",
        "title": "OPA: Partial Evaluation: Selection"
      },
      {
        "command": "opa.prompts.clear",
        "title": "OPA: Clear Dismissed Prompts"
      },
      {
        "command": "opa.debug.debugWorkspace",
        "title": "Debug Workspace",
        "category": "OPA Debug",
        "enablement": "!inDebugMode",
        "icon": "$(debug-alt)"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "OPA Configuration",
      "properties": {
        "opa.path": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "deprecationMessage": "Please use opa.dependency_paths.opa instead.",
          "description": "Path of the OPA executable. Defaults to null."
        },
        "opa.dependency_paths.opa": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "Path to OPA's binary. Defaults to null."
        },
        "opa.dependency_paths.regal": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "Path to Regal's binary on disk. Defaults to null."
        },
        "opa.checkOnSave": {
          "type": [
            "boolean"
          ],
          "default": false,
          "description": "Run OPA check on save. Defaults to false."
        },
        "opa.roots": {
          "type": [
            "array"
          ],
          "default": [
            "${workspaceFolder}"
          ],
          "description": "List of paths to load as bundles for policy and data. Defaults to [\"${workspaceFolder}\"]."
        },
        "opa.bundleMode": {
          "type": [
            "boolean"
          ],
          "default": true,
          "description": "Enable treating the workspace as a bundle."
        },
        "opa.schema": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "Path to the schema file or directory. Defaults to null. If null, schema evaluation is disabled."
        },
        "opa.strictMode": {
          "type": [
            "boolean"
          ],
          "default": false,
          "description": "Enable strict-mode for the \"OPA: Check File Syntax\" command (OPA check)."
        },
        "opa.languageServers": {
          "type": [
            "array"
          ],
          "default": null,
          "description": "Enable the specified Rego and OPA related language servers. Supports: ['regal'], Default: []."
        },
        "opa.env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "description": "Environment variables passed to the process running OPA."
        },
        "opa.formatter": {
          "type": [
            "string"
          ],
          "default": "opa-fmt",
          "description": "The formatter to use for Rego. Supports: ['opa-fmt', 'opa-fmt-rego-v1', 'regal-fix']."
        }
      }
    },
    "languages": [
      {
        "id": "rego",
        "aliases": [
          "Rego",
          "rego"
        ],
        "extensions": [
          ".rego"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "rego",
        "scopeName": "source.rego",
        "path": "./syntaxes/Rego.tmLanguage"
      },
      {
        "scopeName": "markdown.rego.codeblock",
        "path": "./syntaxes/markdown-inject.json",
        "injectTo": [
          "text.html.markdown"
        ],
        "embeddedLanguages": {
          "meta.embedded.block.rego": "rego"
        }
      }
    ],
    "breakpoints": [
      {
        "language": "rego"
      }
    ],
    "debuggers": [
      {
        "type": "opa-debug",
        "label": "OPA Debug",
        "languages": [
          "rego"
        ],
        "configurationAttributes": {
          "launch": {
            "properties": {
              "command": {
                "type": "string",
                "description": "The OPA command to run. E.g. 'eval', 'test'.",
                "default": "eval"
              },
              "query": {
                "type": "string",
                "default": "data"
              },
              "dataPaths": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "bundlePaths": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of paths to load as bundles for policy and data. If not set, defaults to the value configured in 'opa.roots'. Can be set to the empty array [] to disable loading of bundles.",
                "default": [
                  "${workspaceFolder}"
                ]
              },
              "input": {
                "type": "string"
              },
              "inputPath": {
                "type": "string"
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop after launch.",
                "default": true
              },
              "stopOnFail": {
                "type": "boolean",
                "description": "Automatically stop on 'Fail' operations.",
                "default": false
              },
              "stopOnResult": {
                "type": "boolean",
                "description": "Automatically stop when done.",
                "default": true
              },
              "trace": {
                "type": "boolean",
                "description": "Enable logging of the Debug Adapter Protocol.",
                "default": true
              },
              "enablePrint": {
                "type": "boolean",
                "description": "Enable print statements.",
                "default": true
              },
              "logLevel": {
                "type": "string",
                "description": "Set the log level for log messages printed to the debug console. One of: 'debug', 'info', 'warn', 'error'. If not set, no log messages are printed."
              },
              "ruleIndexing": {
                "type": "boolean",
                "description": "Enable rule indexing.",
                "default": false
              }
            }
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "lint": "eslint ."
  },
  "devDependencies": {
    "@microsoft/eslint-formatter-sarif": "^3.1.0",
    "@stylistic/eslint-plugin": "^2.12.1",
    "@types/command-exists": "^1.2.3",
    "@types/mocha": "10.0.10",
    "@types/node": "22.10.2",
    "@types/semver": "^7.5.8",
    "@types/vscode": "1.96.0",
    "cspell": "^8.17.0",
    "dprint": "^0.47.6",
    "eslint": "^9.17.0",
    "typescript": "^5.7.2",
    "typescript-eslint": "^8.18.0",
    "@vscode/vsce": "^3.2.1"
  },
  "dependencies": {
    "@fohlen/github-release-downloader": "^1.0.0",
    "command-exists": "^1.2.9",
    "semver": "^7.6.3",
    "vscode-languageclient": "^9.0.1"
  },
  "__metadata": {
    "id": "ab758a0c-5cb5-417e-99bf-12a6e16bb148",
    "publisherDisplayName": "Torin Sandall",
    "publisherId": "4052f3dc-ff54-4c3b-9ad2-44e7ac5b9f4d"
  }
}
